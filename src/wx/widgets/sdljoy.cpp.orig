#include "wx/sdljoy.h"
#include <SDL/SDL.h>
#include <SDL/SDL_joystick.h>
#include <wx/window.h>

DEFINE_EVENT_TYPE(wxEVT_SDLJOY)

struct wxSDLJoyState
{
    SDL_Joystick *dev;
    int nax, nhat, nbut;
    short *curval;
    ~wxSDLJoyState()
    {
        if(dev) SDL_JoystickClose(dev);
    }
};

wxSDLJoy::wxSDLJoy(bool analog) : wxTimer(), digital(!analog),
    evthandler(0), joystate(0), nosticks(true)
{
    // Start up joystick if not already started
    // FIXME: check for errors
    if (SDL_Init(SDL_INIT_JOYSTICK) == -1) return;
    // but we'll have to manage it manually
    SDL_JoystickEventState(SDL_IGNORE);
    // now query joystick config and open joysticks
    // there is no way to reread this later (e.g. if joystick plugged in),
    // since SDL won't


}

wxSDLJoy::~wxSDLJoy()
{
    delete[] joystate;
    // SDL_QuitSubSystem(SDL_INIT_JOYSTICK);
}

wxEvtHandler *wxSDLJoy::Attach(wxEvtHandler *handler)
{
    wxEvtHandler *prev = evthandler;
    evthandler = handler;
    return prev;
}


void wxSDLJoy::Add(int joy)
{
    if(joy >= njoy || !njoy)
        return;
    if(joy < 0)
    {
        for(int i = 0; i < njoy; i++)
            Add(i);
        return;
    }
    if(!joystate[joy].dev)
        joystate[joy].dev = SDL_JoystickOpen(joy);
    if(nosticks && joystate[joy].dev)
    {
        Start(50);
        nosticks = false;
    }
}

void wxSDLJoy::Remove(int joy)
{
    if(joy >= njoy || !njoy)
        return;
    if(joy < 0)
    {
        for(int i = 0; i < njoy; i++)
            if(joystate[i].dev)
            {
                SDL_JoystickClose(joystate[i].dev);
                joystate[i].dev = NULL;
            }
        Stop();
        nosticks = true;
        return;
    }
    if(!joystate[joy].dev)
        return;
    SDL_JoystickClose(joystate[joy].dev);
    joystate[joy].dev = NULL;
    for(int i = 0; i < njoy; i++)
        if(joystate[i].dev)
            return;
    Stop();
    nosticks = true;
}

void wxSDLJoy::Notify()
{
    if(nosticks)
        return;
    SDL_JoystickUpdate();
    wxEvtHandler *handler = evthandler ? evthandler : wxWindow::FindFocus();
    for(int i = 0; i < njoy; i++)
    {
        SDL_Joystick *dev = joystate[i].dev;
        if(dev)
        {
            int nax = joystate[i].nax, nhat = joystate[i].nhat,
                nbut = joystate[i].nbut;
            int ctrl = 0;
            short val;
            for(int j = 0; j < nax; j++)
            {
                val = SDL_JoystickGetAxis(dev, j);
                if(digital)
                {
                    if(val > 0x3fff)
                        val = 0x7fff;
                    else if(val <= -0x3fff)
                        val = -0x7fff;
                    else
                        val = 0;
                }
                if(handler && val != joystate[i].curval[j])
                {
                    wxSDLJoyEvent ev(wxEVT_SDLJOY, GetId());
                    ev.joy = i;
                    ev.ctrl_type = WXSDLJOY_AXIS;
                    ev.ctrl_idx = j;
                    ev.ctrl_val = val;
                    ev.prev_val = joystate[i].curval[j];
                    handler->ProcessEvent(ev);
                }
                joystate[i].curval[j] = val;
            }
            for(int j = 0; j < nhat; j++)
            {
                val = SDL_JoystickGetHat(dev, j);
                if(handler && val != joystate[i].curval[nax + j])
                {
                    wxSDLJoyEvent ev(wxEVT_SDLJOY, GetId());
                    ev.joy = i;
                    ev.ctrl_type = WXSDLJOY_HAT;
                    ev.ctrl_idx = j;
                    ev.ctrl_val = val;
                    ev.prev_val = joystate[i].curval[nax + j];
                    handler->ProcessEvent(ev);
                }
                joystate[i].curval[nax + j] = val;
            }
            for(int j = 0; j < nbut; j++)
            {
                val = SDL_JoystickGetButton(dev, j);
                if(handler && val != joystate[i].curval[nax + nhat + j])
                {
                    wxSDLJoyEvent ev(wxEVT_SDLJOY, GetId());
                    ev.joy = i;
                    ev.ctrl_type = WXSDLJOY_BUTTON;
                    ev.ctrl_idx = j;
                    ev.ctrl_val = val;
                    ev.prev_val = joystate[i].curval[nax + nhat + j];
                    handler->ProcessEvent(ev);
                }
                joystate[i].curval[nax + nhat + j] = val;
            }
        }
    }
}

static bool sdlCheckJoyKey(int key)
{
    int dev = (key >> 16) - 1;
    int what = key & 0xffff;

    if(what >= 128)
    {
        // joystick button
        int button = what - 128;

        if(button >= joystate[i].nbut)
            return false;
    }
    else if (what < 0x20)
    {
        // joystick axis
        what >>= 1;
        if(what >= joystate[i].nax)
            return false;
    }
    else if (what < 0x30)
    {
        // joystick hat
        what = (what & 15);
        what >>= 2;
        if(what >= joystate[i].nhat)
            return false;
    }

    // no problem found
    return true;
}

void inputInitJoysticks()
{
	const int SDLBUTTONS_NUM = 14;
	static uint32_t joypad[SDLBUTTONS_NUM] =
	{
	    SDLK_LEFT,  SDLK_RIGHT, SDLK_UP,    SDLK_DOWN,
	    SDLK_z,     SDLK_x,	    SDLK_RETURN,SDLK_BACKSPACE,
	    SDLK_a,     SDLK_s,	    SDLK_SPACE, SDLK_F12,
	    SDLK_q,     SDLK_w,
	};

	static uint32_t motion[4] =
	{
	    SDLK_KP4, SDLK_KP6, SDLK_KP8, SDLK_KP2
	};
    // The main joypad has to be entirely defined
    for(int i = 0; i < SDLBUTTONS_NUM; i++)
    {
        if (!joypad[PAD_MAIN][i])
            joypad[PAD_MAIN][i] = joypad[PAD_DEFAULT][i];
    }

    njoy = SDL_NumJoysticks();
    if(!njoy)
        return;

    /*if(sdlNumDevices)
      sdlDevices = (SDL_Joystick **)calloc(1,sdlNumDevices *
                                           sizeof(SDL_Joystick **));*/
    joystate = new wxSDLJoyState_t[njoy];
    memset(joystate, 0, njoy * sizeof(*joystate));
    for(int i = 0; i < njoy; i++)
    {
        SDL_Joystick *dev = joystate[i].dev = SDL_JoystickOpen(i);
        int nctrl = 0;
        nctrl += joystate[i].nax = SDL_JoystickNumAxes(dev);
        nctrl += joystate[i].nhat = SDL_JoystickNumHats(dev);
        nctrl += joystate[i].nbut = SDL_JoystickNumButtons(dev);
        joystate[i].curval = new short[nctrl];
        memset(joystate[i].curval, 0, sizeof(short) * nctrl);
    }

    bool usesJoy = false;

    for(int i = 0; i < SDLBUTTONS_NUM; i++)
    {
        int dev = joypad[i] >> 16;
        if(dev)
        {
            dev--;
            if(dev < njoy && sdlCheckJoyKey(joypad[i]))
                usesJoy = true;
        }
    }

    for(int i = 0; i < 4; i++)
    {
        int dev = motion[i] >> 16;
        if(dev)
        {
            dev--;
            if(dev < njoy && sdlCheckJoyKey(motion[i]));
                usesJoy = true;
        }
    }

    if(!usesJoy)
        nosticks = true;
}



int wxSDLJoy::DetectJoysticks()
{
}
